# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|

  config.vm.box = "ubuntu/jammy64"
  config.vm.synced_folder './keys', '/home/vagrant/keys', create: true, disabled: false
  config.vm.synced_folder '.', '/vagrant', disabled: true
  config.vm.boot_timeout = 600

  config.vm.provider "virtualbox" do |vbox|
    vbox.memory = 2048
    vbox.cpus = 2
  end

  config.vm.provision "shell", inline: <<-SHELL
    echo "COMMON STEPS:"
    apt-get update && apt-get upgrade -y

    echo "Protocol 2" >> /etc/ssh/sshd_config
    echo "LoginGraceTime 10s" >> /etc/ssh/sshd_config
    echo "MaxAuthTries 2" >> /etc/ssh/sshd_config
    echo "MaxSessions 2" >> /etc/ssh/sshd_config
    echo "PermitEmptyPasswords no" >> /etc/ssh/sshd_config
    echo "HostbasedAuthentication no" >> /etc/ssh/sshd_config
    echo "PasswordAuthentication no" >> /etc/ssh/sshd_config
    echo "PubkeyAuthentication yes" >> /etc/ssh/sshd_config
    echo "PermitRootLogin no" >> /etc/ssh/sshd_config
    systemctl restart ssh

    echo "ubuntu:123456ubuntu" | chpasswd
  SHELL

  config.vm.define "vm1" do |vm1config|
    vm1config.vm.network "private_network", ip: "192.168.2.11"
    vm1config.vm.network "forwarded_port", guest: 3389, host: 3389
    vm1config.vm.hostname = "vm1"
    vm1config.vm.provision "shell", inline: <<-SHELL
      echo "SPECIFIC STEPS:"
      ssh-keygen -t rsa -N "" -q -f /home/vagrant/.ssh/id_rsa
      chown vagrant:vagrant /home/vagrant/.ssh/*
      cp /home/vagrant/.ssh/id_rsa.pub /home/vagrant/keys/

      apt-get install -y ubuntu-desktop-minimal
      snap install snap-store
      apt-get install -y chromium

      apt-get install -y xrdp
      systemctl enable xrdp
      systemctl start xrdp
      ufw allow 3389
    SHELL
  end

  config.vm.define "vm2" do |vm2config|
    vm2config.vm.network "private_network", ip: "192.168.2.12"
    vm2config.vm.network "forwarded_port", guest: 5000, host: 5000
    vm2config.vm.hostname = "vm2"
    vm2config.vm.provision "shell", inline: <<-SHELL
      echo "SPECIFIC STEPS:"
      cat /home/vagrant/keys/id_rsa.pub >> /home/ubuntu/.ssh/authorized_keys

      apt-get install -y ca-certificates curl
      install -m 0755 -d /etc/apt/keyrings
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
      chmod a+r /etc/apt/keyrings/docker.asc
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      apt-get update
      apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

      apt-get install -y wireguard
      systemctl enable wireguard

      git clone https://github.com/ngoduykhanh/wireguard-ui.git /opt/wireguard-ui
      echo "    restart: always" >> /opt/wireguard-ui/docker-compose.yaml
      cd /opt/wireguard-ui
      # usage of env variables WGUI_MANAGE_START and WGUI_MANAGE_RESTART doesn't work at me
      systemctl enable docker
      systemctl start docker.service
      docker compose up -d
    SHELL
  end

  config.vm.define "vm3" do |vm3config|
    vm3config.vm.network "private_network", ip: "192.168.2.13"
    vm3config.vm.hostname = "vm3"
    vm3config.vm.provision "shell", inline: <<-SHELL
      echo "SPECIFIC STEPS:"
      cat /home/vagrant/keys/id_rsa.pub >> /home/ubuntu/.ssh/authorized_keys

      useradd --create-home --shell /bin/bash --user-group --groups sudo adam
      echo "adam ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/adam
    SHELL
  end

  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessible to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
